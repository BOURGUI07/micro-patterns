################# SEC 08 CIRCUIT BREAKER ######################
resilience4j.circuitbreaker:
  instances:
    review-service: #the same name of @CircuitBreaker implemented above the method which has the problem
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 4 #based on 4 request sent, he will decide the health state of the service
      minimumNumberOfCalls: 2 #consider at minimum 2 new requests before taking any decision of opening or closing
      failureRateThreshold: 50 #if 50% of requests failed, then he will go to open mode
      waitDurationInOpenState: 10s #stay 10s in open mode
      permittedNumberOfCallsInHalfOpenState: 2 #while you're on half-open state, permit 2 requests, if they're healthy, go to open state, otherwise go back to open state
      recordExceptions: #consider these kinds of exceptions as failures
        - org.springframework.web.reactive.function.client.WebClientResponseException
        - java.util.concurrent.TimeoutException

################ SEC 09 RATE LIMITER ####################
resilience4j.ratelimiter:
  instances:
    calculator-service:
      limitRefreshPeriod: 20s #in a period of 20s
      limitForPeriod: 5 # I want to limit 5 requests per 20s
      timeoutDuration: 5s # if a client sends 5 request and there's still 5s left to 20s, then allow for more requests until 20s comes
    review-service:
      limitRefreshPeriod: 20s
      limitForPeriod: 3
      timeoutDuration: 0s